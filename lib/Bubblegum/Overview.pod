# PODNAME: Bubblegum::Overview
# ABSTRACT: An Overview of the Bubblegum Development Framework

# VERSION

=head1 SYNOPSIS

    use Bubblegum;

is equivalent to

    use 5.10.0;
    use autobox;
    use autodie ':all';
    use feature ':5.10';
    use strict;
    use warnings FATAL => 'all';
    use utf8::all;
    use mro 'c3';
    use Moo; # optional

with the exception that Bubblegum implements it's own autoboxing architecture.
The Bubblegum autobox classes are the foundation for this development framework.
The decision to re-implement many core and autobox functions was based on the
desire to build-in data validation and design a system using object-roles for
a higher level of abstraction. The following functionality is made available
simply by using Bubblegum:

    # no more $FindBin::RealBin,
    # assuming your script is located in a bin directory one level down from
    # where your lib directory is

        BEGIN {
            use Bubblegum;
            use lib $*->lib; # equivalent to ./bin/lib
        }

    # or

        BEGIN {
            use Bubblegum;
            use lib $*->lib(1); # equivalent to ./bin/../lib
        }

    # opt-out of Moo,
    # which is especially useful in classes which have conflicting, functions or
    # use an alternate object system

        use Bubblegum -base; # no Moo
        use Moose;

    # dollar-star (global object variable)

        printf 'Running %s', $*->script; # Running /opt/app/repl

    # integers

        my $range = 10->to(1); # [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ]

    # floats

        my $strip = 3.1415927->incr->int; # 4

    # strings

        my $greet = 'hello world'->titlecase; # "Hello World"

    # arrays

        my $alpha = ['a'..'z'];
        my $map   = $alpha->keyed(1..26); # { 1=>'a', 2='b', ...}

    # hashes

        my $map = { 1=>'a', 2=>'b', 3=>'c', ...};
        $map->reset->set(1 => 'z'); # { 1=>'z', 2=undef, 3=>undef, ...}

    # routines

        my $code = ['a'..'z']->iterator;
        my $char = $code->call;

    # comparison operations

        my $ten = "10";   # string containing the number 10
        $ten->eqtv(10)    # false, strict comparison, type and value mismatch
        $ten->eq(10)      # true, value comparison with coercion
        10->eq($ten)      # true, same as above
        "10"->type        # string
        (10)->type        # integer
        10->typeof('nil') # false
        10->typeof('num') # true
        10->typeof('str') # false

    # et al

        say [@INC]->join("\n");

=head1 DESCRIPTION

Bubblegum is a modern Perl development framework, it enforces common best
practices and is intended to be used to enhance your Perl environment and
development experience. The design goal of Bubblegum is to be as minimal as
possible, enabling as many core features as is justifiable, making the common
most repetitive programming tasks simply a method call away, and having all this
available by simply requiring this library. This framework is very opinionated
and designed around convention over configuration. Designed for adoption, all of
the techniques used in this framework are well-known by experienced Perl
developers and made conveniently available to programmers at all levels, i.e.,
no experimental features used. B<Note: This is an early release available for
testing and feedback and as such is subject to change.>

=head2 Bubblegum Global Object

Bubblegum has a global object, an instance of a kind-of utility class containing
methods which carry-out common programming tasks that are not intrinsically tied
to a particular data type. This global object is assigned to dollar-star ($*),
and is a Bubblegum::Environment object which also provides information about the
system and runtime environment. The dollar-star object is meant to provide easy
access to common routines, e.g., file and path routines, date and time routines,
access to environment variables and user information, as well as many other
utility functions like dumping and encoding data. This variable will be made
available once Bubblegum has been loaded. There are lots of handy methods which
can be called on this object. The dollar-star as a variable for the global
object is useful for making common routines available to your program without
polluting the calling class' namespace. By default, Bubblegum injects the Moo
framework as well as it's (has, with, requires, etc) methods into the calling
class' namespace. You can opt-out of this behavior by passing the argument -base
to the use statement.

    use Bubblegum -base; # no Moo

    my $payday = $*->date('next friday');
    say 'My paycheck will be deposited on', $payday;


=head2 Bubblegum Topology

Bubblegum type classes are built as extensions to the autobox type classes. The
following is the custom autobox type, subtype and roles hierarchy. All native
data types inherit their functionality from the universal class, then whichever
autobox subtype class is appropriate and so on. Bubblegum overlays object-roles
on top of this design to enforce constraints and consistency. The following is
the current layout of the object roles and relationships. Note, this will likely
evolve.

    INSTANCE  -+
        [ROLE] VALUE
               |
    UNDEF     -+
        [ROLE] ITEM
               |
    UNIVERSAL -+
        [ROLE] DEFINED
               |
               +- SCALAR -+
               |     [ROLE] VALUE
               |          |
               |          +- NUMBER -+
               |          |     [ROLE] VALUE
               |          |          |
               |          |          +- INTEGER
               |          |          |     [ROLE] VALUE
               |          |          |
               |          |          +- FLOAT
               |          |                [ROLE] VALUE
               |          |
               |          +- STRING
               |                [ROLE] VALUE
               |
               +- ARRAY
               |     [ROLE] REF
               |     [ROLE] LIST
               |     [ROLE] INDEXED
               |
               +- HASH
               |     [ROLE] REF
               |     [ROLE] KEYED
               |
               +- CODE
                    [ROLE] VALUE

=head2 Bubblegum Wrappers

A Bubblegum::Wrapper module exists to extend Bubblegum itself and further extend
the functionality of native data types by letting the data bless itself into
wrappers (plugins) in a chainable discoverable manner. It's also useful as a
technique for coercion and indirect object instantiation. The following is an
example:

    use Bubblegum;

    my $hash = {1..3,{4,{5,6,7,{8,9,10,11}}}};
    my $json = $hash->json; # load Bubblegum::Wrapper::Json dynamically
    say $json->encode;      # encode the hash as json

    # {"1":2,"3":{"4":{"7":{"8":9,"10":11},"5":6}}}

=head2 Bubblegum Routines

The following routines will can be called on their associated data type as if
the native types were blessed objects.

=head3 Array Routines

Array routines work on arrays and array references. Please see
L<Bubblegum::Object::Array> for more information on routines associated with
array references.

=head3 Code Routines

Code routines work on code references. Please see L<Bubblegum::Object::Code> for
more information on routines associated with code references.

=head3 Hash Routines

Hash routines work on hash and hash references. Please see
L<Bubblegum::Object::Hash> for more information on routines associated with hash
references.

=head3 Integer Routines

Integer routines work on integer and number data. Please see
L<Bubblegum::Object::Integer> for more information on routines associated with
integers.

=head3 Number Routines

Number routines work on data that meets the criteria for being a number. Please
see L<Bubblegum::Object::Number> for more information on routines associated
with numbers.

=head3 String Routines

String routines work on data that meets the criteria for being a string. Please
see L<Bubblegum::Object::String> for more information on routines associated
with strings.

=head3 Undef Routines

Undef routines work on variables whose value is undefined. Note, undef routines
do not work on undef directly. Please see L<Bubblegum::Object::Undef> for more information on routines associated with undefined variables.

=head3 Universal Routines

Universal routines work on all data which meets the criteria for being defined.
Please see L<Bubblegum::Object::Universal> for more information on routines
associated with array references.

=cut
